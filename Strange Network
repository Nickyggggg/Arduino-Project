#include "SparkFunLSM6DS3.h"
#include "Wire.h"
#include "six_axis_comp_filter.h"
#include <Adafruit_NeoPixel.h>

#include <WiFiNINA.h>
#include "arduino_secrets.h"
int status = WL_IDLE_STATUS;           // the Wi-Fi radio's status
unsigned long previousMillisInfo = 0;  //will store last time Wi-Fi information was updated
unsigned long previousMillisLED = 0;   // will store the last time LED was updated
const int intervalInfo = 5000;         // interval at which to update the board information

//please enter your sensitive data in the Secret tab
char ssid[] = SECRET_SSID;  // your network SSID (name)
char pass[] = SECRET_PASS;  // your network password (use for WPA, or use as key for WEP)

#define LEDPIN 21
#define NUMPIXELS 8
#define LED_COUNT 10

LSM6DS3 nano33IMU(I2C_MODE, 0x6A);  //define the IMU object
CompSixAxis CompFilter(0.1, 2);     //define the filter object
Adafruit_NeoPixel ledstrip(NUMPIXELS, LEDPIN, NEO_GRB + NEO_KHZ800);

float pitch;
float roll;

void setup() {
  Serial.begin(9600);
  //Call .begin() to configure the IMU (Inertial Measurement Unit)
  nano33IMU.begin();

  pinMode(LEDPIN, OUTPUT);
  ledstrip.begin();
  ledstrip.setBrightness(5);
  ledstrip.show();  // Initialize all pixels to 'off'


  // while (status != WL_CONNECTED) {
  //   Serial.print("Attempting to connect to network: ");
  //   Serial.println(ssid);
  //   // Connect to WPA/WPA2 network:
  //   status = WiFi.begin(ssid, pass);

  //   // wait 10 seconds for connection:
  //   delay(10000);
  // }

  // // you're connected now, so print out the data:
  // Serial.println("You're connected to the network");
  // Serial.println("---------------------------------------");
}

void loop() {
  calculatePitchAndRoll();
  Serial.print(pitch);
  Serial.print(" ");
  Serial.println(roll);
  if (pitch < 40 || pitch > 320 || roll < 40 || roll > 320) {  //do smth on roll too
    colorWipe(ledstrip.Color(117, 57, 229), 30);
  } else if ((pitch >= 40 && pitch <= 100) || (roll >= 40 && roll <= 100)) {
    colorWipe(ledstrip.Color(92, 255, 12), 30);
  } else if ((pitch > 100 && pitch <= 160) || (roll > 100 && roll <= 160)) {
    colorWipe(ledstrip.Color(12, 244, 252), 30);
  } else if ((pitch > 160 && pitch <= 220) || (roll > 160 && roll <= 220)) {
    colorWipe(ledstrip.Color(255, 100, 100), 30);
  } else if ((pitch > 220 && pitch <= 280) || (roll > 220 && roll <= 280)) {
    colorWipe(ledstrip.Color(255, 128, 0), 30);

  } else {
    rainbow(2);
  }
}

void calculatePitchAndRoll() {
  float accelX, accelY, accelZ,  // variables to store sensor values
    gyroX, gyroY, gyroZ,
    xAngle, yAngle;

  //  Get all motion sensor (in this case LSM6DS3) parameters,
  //  If you're using a different sensor you'll have to replace the values
  accelX = nano33IMU.readFloatAccelX();
  accelY = nano33IMU.readFloatAccelY();
  accelZ = nano33IMU.readFloatAccelZ();
  gyroX = nano33IMU.readFloatGyroX();
  gyroY = nano33IMU.readFloatGyroY();
  gyroZ = nano33IMU.readFloatGyroZ();

  // Convert these values into angles using the Complementary Filter
  CompFilter.CompAccelUpdate(accelX, accelY, accelZ);  // takes arguments in m/s^2
  CompFilter.CompGyroUpdate(gyroX, gyroY, gyroZ);      // takes arguments un rad/s
  CompFilter.CompUpdate();
  CompFilter.CompStart();

  // Get angle relative to X and Y axes and write them to the variables in the arguments
  //in radians
  CompFilter.CompAnglesGet(&xAngle, &yAngle);

  //convert from radians to angles
  pitch = xAngle * RAD_TO_DEG;
  roll = yAngle * RAD_TO_DEG;
}


void colorWipe(uint32_t color, int wait) {
  for (int i = 0; i < ledstrip.numPixels(); i++) {
    ledstrip.setPixelColor(i, color);
    ledstrip.show();
    delay(100);
  }
}

// Rainbow cycle along whole strip. Pass delay time (in ms) between frames.
void rainbow(int wait) {
  // Hue of first pixel runs 5 complete loops through the color wheel.
  // Color wheel has a range of 65536 but it's OK if we roll over, so
  // just count from 0 to 5*65536. Adding 256 to firstPixelHue each time
  // means we'll make 5*65536/256 = 1280 passes through this outer loop:
  for (long firstPixelHue = 0; firstPixelHue < 5 * 65536; firstPixelHue += 256) {
    for (int i = 0; i < ledstrip.numPixels(); i++) {  // For each pixel in strip...
      // Offset pixel hue by an amount to make one full revolution of the
      // color wheel (range of 65536) along the length of the strip
      // (strip.numPixels() steps):
      int pixelHue = firstPixelHue + (i * 65536L / ledstrip.numPixels());
      // strip.ColorHSV() can take 1 or 3 arguments: a hue (0 to 65535) or
      // optionally add saturation and value (brightness) (each 0 to 255).
      // Here we're using just the single-argument hue variant. The result
      // is passed through strip.gamma32() to provide 'truer' colors
      // before assigning to each pixel:
      ledstrip.setPixelColor(i, ledstrip.gamma32(ledstrip.ColorHSV(pixelHue)));
    }
    ledstrip.show();  // Update strip with new contents
    delay(wait);      // Pause for a moment
  }
}
